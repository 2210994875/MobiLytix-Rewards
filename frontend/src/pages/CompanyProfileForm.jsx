// // src/pages/CompanyProfileForm.jsx
// import React, { useState } from "react";
// import TermsModal from "../components/TermsModal";
// import "./CompanyProfile.css";
// //import "../styles/CompanyProfile.css";     // for the wrapper card + banner
// import "./CompanyProfileForm.css"; // for the gradient language card + inputs



// const messages = {
//   en: {
//     labels: {
//       welcome: "Welcome",      
//       company_id: "Company ID",
//       company_name: "Company Name",
//       description: "Description",
//       address: "Address",
//       owner: "Owner",
//       email: "Email",
//       mobile: "Mobile",
//       landline: "Landline",
//       category: "Category",
//       subcategory: "Subcategory",
//       discount: "Discount (%)",
//       comments: "Comments",
//       contract: "Upload Contract",
//       agree: "I agree to Terms & Conditions",
//     },
//     errors: {
//       company_id: "Company ID is required",
//       company_name: "Company Name is required",
//       description: "Description is required",
//       address: "Address is required",
//       owner: "Owner is required",
//       email: "Valid email required",
//       mobile: "Mobile must be 8‚Äì15 digits",
//       discount_required: "Discount is required",
//       discount_format: "Max 2-digit number",
//       category: "Select category",
//       subcategory: "Select subcategory",
//       agree: "You must agree to Terms",
//     },
//   },
//   fr: {
//     labels: {
//       welcome: "Bienvenue",   
//       company_id: "ID d'entreprise",
//       company_name: "Nom de l'entreprise",
//       description: "Description",
//       address: "Adresse",
//       owner: "Propri√©taire",
//       email: "Email",
//       mobile: "T√©l√©phone portable",
//       landline: "Ligne fixe",
//       category: "Cat√©gorie",
//       subcategory: "Sous-cat√©gorie",
//       discount: "Remise (%)",
//       comments: "Commentaires",
//       contract: "T√©l√©charger le contrat",
//       agree: "J'accepte les conditions g√©n√©rales",
//     },
//     errors: {
//       company_id: "ID d'entreprise requis",
//       company_name: "Nom de l'entreprise requis",
//       description: "Description requise",
//       address: "Adresse requise",
//       owner: "Propri√©taire requis",
//       email: "Email valide requis",
//       mobile: "Le mobile doit comporter 8 √† 15 chiffres",
//       discount_required: "La remise est obligatoire",
//       discount_format: "Nombre maximum √† 2 chiffres",
//       category: "S√©lectionnez une cat√©gorie",
//       subcategory: "S√©lectionnez une sous-cat√©gorie",
//       agree: "Vous devez accepter les conditions",
//     },
//   },
//   ar: {
//     labels: {
//       welcome: "ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã",   
//       company_id: "ŸÖÿπÿ±ŸÅ ÿßŸÑÿ¥ÿ±ŸÉÿ© ",
//       company_name: "ÿßÿ≥ŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿ©",
//       description: "ÿßŸÑŸàÿµŸÅ",
//       address: "ÿßŸÑÿπŸÜŸàÿßŸÜ",
//       owner: "ÿßŸÑŸÖÿßŸÑŸÉ",
//       email: "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
//       mobile: "ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ",
//       landline: "ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ£ÿ±ÿ∂Ÿä",
//       category: "ÿßŸÑŸÅÿ¶ÿ©",
//       subcategory: "ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÅÿ±ÿπŸäÿ©",
//       discount: "ÿßŸÑÿÆÿµŸÖ (%)",
//       comments: "ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™",
//       contract: "ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿπŸÇÿØ",
//       agree: "ÿ£ŸàÿßŸÅŸÇ ÿπŸÑŸâ ÿßŸÑÿ¥ÿ±Ÿàÿ∑ ŸàÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ",
//     },
//     errors: {
//       company_id: "ŸÖÿπÿ±ŸÅ ÿßŸÑÿ¥ÿ±ŸÉÿ© ŸÖÿ∑ŸÑŸàÿ®",
//       company_name: "ÿßÿ≥ŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿ© ŸÖÿ∑ŸÑŸàÿ®",
//       description: "ÿßŸÑŸàÿµŸÅ ŸÖÿ∑ŸÑŸàÿ®",
//       address: "ÿßŸÑÿπŸÜŸàÿßŸÜ ŸÖÿ∑ŸÑŸàÿ®",
//       owner: "ÿßŸÑŸÖÿßŸÑŸÉ ŸÖÿ∑ŸÑŸàÿ®",
//       email: "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠",
//       mobile: "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿ®ŸäŸÜ 8 Ÿà 15 ÿ±ŸÇŸÖŸãÿß",
//       discount_required: "ÿßŸÑÿÆÿµŸÖ ŸÖÿ∑ŸÑŸàÿ®",
//       discount_format: "ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ ÿ±ŸÇŸÖ ŸÖŸÜ ÿ±ŸÇŸÖŸäŸÜ",
//       category: "ÿßÿÆÿ™ÿ± ÿßŸÑŸÅÿ¶ÿ©",
//       subcategory: "ÿßÿÆÿ™ÿ± ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÅÿ±ÿπŸäÿ©",
//       agree: "Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸàÿßŸÅŸÇ ÿπŸÑŸâ ÿßŸÑÿ¥ÿ±Ÿàÿ∑",
//     },
//   },
// };

// export default function CompanyProfileForm() {
//   const [activeLang, setActiveLang] = useState("en");
//   const [form, setForm] = useState({
//     company_id: "",
//     companyEn: "",
//     descEn: "",
//     addressEn: "",
//     ownerEn: "",
//     companyFr: "",
//     descFr: "",
//     addressFr: "",
//     ownerFr: "",
//     companyAr: "",
//     descAr: "",
//     addressAr: "",
//     ownerAr: "",
//     email: "",
//     mobile: "",
//     landline: "",
//     category: "",
//     subcategory: "",
//     discount: "",
//     comments: "",
//     agree: false,
//   });

//   const [file, setFile] = useState(null);
//   const [errors, setErrors] = useState({});
//   const [showTerms, setShowTerms] = useState(false);

//   const has = (s) => !!(s && s.trim());
//   const emailRx = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

//   const validate = (f) => {
//     const e = {};
//     const t = messages[activeLang].errors;

//     if (!has(f.company_id)) e.company_id = t.company_id;

//     if (activeLang === "en") {
//       if (!has(f.companyEn)) e.companyEn = t.company_name;
//       if (!has(f.descEn)) e.descEn = t.description;
//       if (!has(f.addressEn)) e.addressEn = t.address;
//       if (!has(f.ownerEn)) e.ownerEn = t.owner;
//     }
//     if (activeLang === "fr") {
//       if (!has(f.companyFr)) e.companyFr = t.company_name;
//       if (!has(f.descFr)) e.descFr = t.description;
//       if (!has(f.addressFr)) e.addressFr = t.address;
//       if (!has(f.ownerFr)) e.ownerFr = t.owner;
//     }
//     if (activeLang === "ar") {
//       if (!has(f.companyAr)) e.companyAr = t.company_name;
//       if (!has(f.descAr)) e.descAr = t.description;
//       if (!has(f.addressAr)) e.addressAr = t.address;
//       if (!has(f.ownerAr)) e.ownerAr = t.owner;
//     }

//     if (!emailRx.test(f.email)) e.email = t.email;
//     if (!/^\d{8,15}$/.test(String(f.mobile || ""))) e.mobile = t.mobile;
//     if (!has(f.discount)) e.discount = t.discount_required;
//     else if (!/^\d{1,2}$/.test(f.discount)) e.discount = t.discount_format;
//     if (!f.category) e.category = t.category;
//     if (!f.subcategory) e.subcategory = t.subcategory;
//     if (!f.agree) e.agree = t.agree;

//     return e;
//   };

//   const handleChange = (e) => {
//     const { name, value, type, checked } = e.target;
//     const val = type === "checkbox" ? checked : value;

//     setForm((prev) => ({ ...prev, [name]: val }));

//     setErrors((prev) => {
//       const updated = { ...prev };
//       if (has(val)) delete updated[name];
//       return updated;
//     });
//   };

//   const handleFile = (e) => setFile(e.target.files?.[0] || null);

// const handleSubmit = async (e) => {
//   e.preventDefault();
//   const v = validate(form);
//   setErrors(v);
//   if (Object.keys(v).length > 0) return;

//   const fd = new FormData();

//   // Append global fields
//   fd.append("company_id", form.company_id);
//   fd.append("email", form.email);
//   fd.append("mobile", form.mobile);
//   fd.append("landline", form.landline);
//   fd.append("category", form.category);
//   fd.append("subcategory", form.subcategory);
//   fd.append("discount", form.discount);
//   fd.append("comments", form.comments);

//   // Append file
//   if (file) fd.append("contract", file);

//   // ‚úÖ Only send active language
//   let activeProperties = {};
//   if (activeLang === "en") {
//     activeProperties = {
//       EN: {
//         company_name: form.companyEn,
//         description: form.descEn,
//         address: form.addressEn,
//         owner_name: form.ownerEn,
//       },
//     };
//   } else if (activeLang === "fr") {
//     activeProperties = {
//       FR: {
//         company_name: form.companyFr,
//         description: form.descFr,
//         address: form.addressFr,
//         owner_name: form.ownerFr,
//       },
//     };
//   } else if (activeLang === "ar") {
//     activeProperties = {
//       AR: {
//         company_name: form.companyAr,
//         description: form.descAr,
//         address: form.addressAr,
//         owner_name: form.ownerAr,
//       },
//     };
//   }

//   fd.append("properties", JSON.stringify(activeProperties));

//   try {
//     const base = import.meta.env.VITE_API_URL || "";

//     // üîπ Decide whether to create or update
//     const url = id
//       ? `${base}/api/companies/${id}` // update
//       : `${base}/api/companies`;      // create

//     const method = id ? "PUT" : "POST";

//     const res = await fetch(url, {
//       method,
//       body: fd,
//     });

//     const response = await res.json();

//     if (!res.ok) {
//       alert(`‚ùå Failed to save company: ${response.error || "Unknown error"}`);
//       return;
//     }

//     if (id) {
//       alert("‚úÖ Company updated successfully!");
//     } else {
//       alert("‚úÖ Company created successfully!");
//     }

//     // üëà go back to list page after save
//     navigate("/company-profile");
//   } catch (err) {
//     console.error("‚ùå Error:", err);
//     alert("‚ùå Failed to save company: " + err.message);
//   }
// };

//   const langKey = activeLang.charAt(0).toUpperCase() + activeLang.slice(1);

//   return (
//     <div className="register-container">
//       <header className="banner">
//         <h1>Create Company Profile</h1>
//       </header>

//       <main className="form-card">
//         <h2>Company Information</h2>
//         <form onSubmit={handleSubmit} autoComplete="off">
//           {/* Company ID */}
//           <div className="row">
//             <div className="col">
//               <label>
//                 {messages[activeLang].labels.company_id}
//                 <span className="required">*</span>
//               </label>
//              <input
//   type="text"
//   name="company_id"
//   placeholder="Enter Company ID"
//   value={form.company_id}
//   onChange={handleChange}
// />
// {errors.company_id && <p className="error">{errors.company_id}</p>}

//             </div>
//           </div>

//         <div className="lang-tabs">
//         <button
//             className={`lang-btn ${activeLang === "en" ? "active" : ""}`}
//             onClick={(e) => { e.preventDefault(); setActiveLang("en"); }}
//         >
//             English
//         </button>
//         <button
//             className={`lang-btn ${activeLang === "fr" ? "active" : ""}`}
//             onClick={(e) => { e.preventDefault(); setActiveLang("fr"); }}
//         >
//             French
//         </button>
//         <button
//             className={`lang-btn ${activeLang === "ar" ? "active" : ""}`}
//             onClick={(e) => { e.preventDefault(); setActiveLang("ar"); }}
//         >
//             Arabic
//         </button>
//         </div>


//           {/* Language Card */}
//           <div className="lang-card" dir={activeLang === "ar" ? "rtl" : "ltr"}>
//             <h3 className="welcome-heading">
//   {messages[activeLang].labels.welcome}
// </h3>


//             <div className="field">
//               <label>
//                 {messages[activeLang].labels.company_name}
//                 <span className="required">*</span>
//               </label>
//               <input
//                 name={`company${langKey}`}
//                 value={form[`company${langKey}`]}
//                 onChange={handleChange}
//               />
//               {errors[`company${langKey}`] && (
//                 <p className="error">{errors[`company${langKey}`]}</p>
//               )}
//             </div>

//             <div className="field">
//               <label>
//                 {messages[activeLang].labels.description}
//                 <span className="required">*</span>
//               </label>
//               <textarea
//                 name={`desc${langKey}`}
//                 rows="3"
//                 value={form[`desc${langKey}`]}
//                 onChange={handleChange}
//               />
//               {errors[`desc${langKey}`] && (
//                 <p className="error">{errors[`desc${langKey}`]}</p>
//               )}
//             </div>

//             <div className="field">
//               <label>
//                 {messages[activeLang].labels.address}
//                 <span className="required">*</span>
//               </label>
//               <textarea
//                 name={`address${langKey}`}
//                 rows="3"
//                 value={form[`address${langKey}`]}
//                 onChange={handleChange}
//               />
//               {errors[`address${langKey}`] && (
//                 <p className="error">{errors[`address${langKey}`]}</p>
//               )}
//             </div>

//             <div className="field">
//               <label>
//                 {messages[activeLang].labels.owner}
//                 <span className="required">*</span>
//               </label>
//               <input
//                 name={`owner${langKey}`}
//                 value={form[`owner${langKey}`]}
//                 onChange={handleChange}
//               />
//               {errors[`owner${langKey}`] && (
//                 <p className="error">{errors[`owner${langKey}`]}</p>
//               )}
//             </div>
//           </div>

//           {/* Global Fields */}
//           <div className="row">
//             <div className="col">
//               <label>
//                 {messages[activeLang].labels.email}
//                 <span className="required">*</span>
//               </label>
//               <input
//                 type="email"
//                 name="email"
//                 value={form.email}
//                 onChange={handleChange}
//               />
//               {errors.email && <p className="error">{errors.email}</p>}
//             </div>
//             <div className="col">
//               <label>
//                 {messages[activeLang].labels.mobile}
//                 <span className="required">*</span>
//               </label>
//               <input
//                 type="tel"
//                 name="mobile"
//                 value={form.mobile}
//                 onChange={handleChange}
//               />
//               {errors.mobile && <p className="error">{errors.mobile}</p>}
//             </div>
//           </div>

//           <div className="row">
//             <div className="col">
//               <label>{messages[activeLang].labels.landline}</label>
//               <input
//                 type="tel"
//                 name="landline"
//                 value={form.landline}
//                 onChange={handleChange}
//               />
//             </div>
//           </div>

//           <div className="row">
//             <div className="col">
//               <label>
//                 {messages[activeLang].labels.category}
//                 <span className="required">*</span>
//               </label>
//               <select
//                 name="category"
//                 value={form.category}
//                 onChange={handleChange}
//               >
//                 <option value="">--Select--</option>
//                 <option value="hotel">Hotel</option>
//                 <option value="retail">Retail</option>
//               </select>
//               {errors.category && <p className="error">{errors.category}</p>}
//             </div>
//             <div className="col">
//               <label>
//                 {messages[activeLang].labels.subcategory}
//                 <span className="required">*</span>
//               </label>
//               <select
//                 name="subcategory"
//                 value={form.subcategory}
//                 onChange={handleChange}
//               >
//                 <option value="">--Select--</option>
//                 <option value="health">Health</option>
//                 <option value="grocery">Grocery</option>
//                 <option value="fashion">Fashion</option>
//               </select>
//               {errors.subcategory && (
//                 <p className="error">{errors.subcategory}</p>
//               )}
//             </div>
//           </div>

//           <div className="row">
//             <div className="col">
//               <label>
//                 {messages[activeLang].labels.discount}
//                 <span className="required">*</span>
//               </label>
//               <input
//                 name="discount"
//                 value={form.discount}
//                 onChange={handleChange}
//               />
//               {errors.discount && <p className="error">{errors.discount}</p>}
//             </div>
//           </div>

//           <div className="row">
//             <div className="col">
//               <label>{messages[activeLang].labels.comments}</label>
//               <textarea
//                 name="comments"
//                 rows="3"
//                 value={form.comments}
//                 onChange={handleChange}
//               />
//             </div>
//           </div>

//           <div className="row">
//   <div className="col">
//     <label>Upload Contract</label>
//     <input
//       type="file"
//       name="contract"
//       accept=".pdf,.png,.jpg,.jpeg"
//       onChange={(e) => setFile(e.target.files[0])}
//     />
//   </div>
// </div>


       
// {/* Terms & Conditions with toggle */}
// <div className="row">
//   <div className="col terms">
//     <label className="terms-label">
//       {/* Toggle Switch */}
//       <div
//         className={`toggle-switch ${form.agree ? "on" : ""}`}
//         onClick={() =>
//           setForm((prev) => ({ ...prev, agree: !prev.agree }))
//         }
//       >
//         <div className="toggle-slider"></div>
//       </div>

//       {/* Text + Modal Link */}
//       <span>
//         I agree to{" "}
//         <a
//           href="#"
//           onClick={(e) => {
//             e.preventDefault();
//             setShowTerms(true); // ‚úÖ open popup
//           }}
//         >
//           Terms & Conditions
//         </a>
//       </span>
//     </label>

//     {/* Validation error */}
//     {errors.agree && <p className="error">{errors.agree}</p>}
//   </div>
// </div>

// {/* Terms Modal Popup */}
// <TermsModal open={showTerms} onClose={() => setShowTerms(false)} />



//           <div className="button-group">
//             <button type="button" className="btn cancel">
//               Reject
//             </button>
//             <button type="submit" className="btn submit">
//               Approve
//             </button>
//           </div>
//         </form>
//       </main>

//       <footer className="footer">¬© 2025 Comviva. All rights reserved.</footer>
//       <TermsModal open={showTerms} onClose={() => setShowTerms(false)} />
//     </div>
//   );
// }

// src/pages/CompanyProfileForm.jsx
import React, { useState, useEffect } from "react";
import TermsModal from "../components/TermsModal";
import "./CompanyProfile.css";
import "./CompanyProfileForm.css";
import { useParams, useNavigate } from "react-router-dom";


 const messages = {
  en: {
    labels: {
    heading_create: "Create Company Profile",
       heading_edit: "Edit Company Profile",
      company_info: "Company Information",
      welcome: "Welcome",
      company_id: "Company ID",
      company_name: "Company Name",
      description: "Description",
      address: "Address",
      owner: "Owner",
      email: "Email",
      mobile: "Mobile",
      landline: "Landline",
      category: "Category",
      subcategory: "Subcategory",
      discount: "Discount (%)",
      comments: "Comments",
      contract: "Upload Contract",
       agree_prefix: "I agree to",
  terms: "Terms & Conditions",
   cancel: "Cancel",
  approve: "Approve",
  update: "Update",
  
    },
    errors: {
      company_id: "Company ID is required",
      company_name: "Company Name is required",
      description: "Description is required",
      address: "Address is required",
      owner: "Owner is required",
      email: "Valid email required",
      mobile: "Mobile must be 8‚Äì15 digits",
      discount_required: "Discount is required",
      discount_format: "Max 2-digit number",
      category: "Select category",
      subcategory: "Select subcategory",
      agree: "You must agree to Terms",
    },
     terms: {
    title: "Terms & Conditions",
    intro: "These terms and conditions outline the rules and regulations for using this service. By submitting this form, you agree to be bound by these terms.",
    points: [
      "Provide accurate company details.",
      "Ensure uploaded contracts are valid.",
      "Respect privacy and data handling rules."
    ],
    outro: "If you disagree with these terms, you may not proceed with company registration."
  }
  },
  fr: {
    labels: {
         heading_create: "Cr√©er un profil d'entreprise",
    heading_edit: "Modifier le profil de l'entreprise",
    company_info: "Informations sur l'entreprise",
      welcome: "Bienvenue",
      company_id: "ID d'entreprise",
      company_name: "Nom de l'entreprise",
      description: "Description",
      address: "Adresse",
      owner: "Propri√©taire",
      email: "Email",
      mobile: "T√©l√©phone portable",
      landline: "Ligne fixe",
      category: "Cat√©gorie",
      subcategory: "Sous-cat√©gorie",
      discount: "Remise (%)",
      comments: "Commentaires",
      contract: "T√©l√©charger le contrat",
    agree_prefix: "J'accepte",
  terms: "les conditions g√©n√©rales",
  contract: "T√©l√©charger le contrat",
no_file: "Aucun fichier choisi",
 cancel: "Annuler",
  approve: "Approuver",
  update: "Mettre √† jour",

    },
    errors: {
      company_id: "ID d'entreprise requis",
      company_name: "Nom de l'entreprise requis",
      description: "Description requise",
      address: "Adresse requise",
      owner: "Propri√©taire requis",
      email: "Email valide requis",
      mobile: "Le mobile doit comporter 8 √† 15 chiffres",
      discount_required: "La remise est obligatoire",
      discount_format: "Nombre maximum √† 2 chiffres",
      category: "S√©lectionnez une cat√©gorie",
      subcategory: "S√©lectionnez une sous-cat√©gorie",
     agree: "Vous devez accepter les conditions",

    },
    terms: {
    title: "Conditions g√©n√©rales",
    intro: "Ces conditions g√©n√©rales d√©finissent les r√®gles et r√®glements pour utiliser ce service. En soumettant ce formulaire, vous acceptez d‚Äô√™tre li√© par ces conditions.",
    points: [
      "Fournir des informations exactes sur l'entreprise.",
      "S'assurer que les contrats t√©l√©charg√©s sont valides.",
      "Respecter la confidentialit√© et les r√®gles de gestion des donn√©es."
    ],
    outro: "Si vous n'acceptez pas ces conditions, vous ne pouvez pas proc√©der √† l'enregistrement de l'entreprise."
  }
  },
  ar: {
    labels: {
         heading_create: "ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿßŸÑÿ¥ÿ±ŸÉÿ©",
  heading_edit: "ÿ™ÿπÿØŸäŸÑ ŸÖŸÑŸÅ ÿßŸÑÿ¥ÿ±ŸÉÿ©",
  company_info: "ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ¥ÿ±ŸÉÿ©",
      welcome: "ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã",
      company_id: "ŸÖÿπÿ±ŸÅ ÿßŸÑÿ¥ÿ±ŸÉÿ© ",
      company_name: "ÿßÿ≥ŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿ©",
      description: "ÿßŸÑŸàÿµŸÅ",
      address: "ÿßŸÑÿπŸÜŸàÿßŸÜ",
      owner: "ÿßŸÑŸÖÿßŸÑŸÉ",
      email: "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä",
      mobile: "ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ",
      landline: "ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ£ÿ±ÿ∂Ÿä",
      category: "ÿßŸÑŸÅÿ¶ÿ©",
      subcategory: "ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÅÿ±ÿπŸäÿ©",
      discount: "ÿßŸÑÿÆÿµŸÖ (%)",
      comments: "ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™",
      contract: "ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿπŸÇÿØ",
       agree_prefix: "ÿ£ŸàÿßŸÅŸÇ ÿπŸÑŸâ",
  terms: "ÿßŸÑÿ¥ÿ±Ÿàÿ∑ ŸàÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ",
  contract: "ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑÿπŸÇÿØ",
no_file: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßÿÆÿ™Ÿäÿßÿ± ŸÖŸÑŸÅ",
 cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
  approve: "ŸÖŸàÿßŸÅŸÇÿ©",
  update: "ÿ™ÿ≠ÿØŸäÿ´",

    },
    errors: {
      company_id: "ŸÖÿπÿ±ŸÅ ÿßŸÑÿ¥ÿ±ŸÉÿ© ŸÖÿ∑ŸÑŸàÿ®",
      company_name: "ÿßÿ≥ŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿ© ŸÖÿ∑ŸÑŸàÿ®",
      description: "ÿßŸÑŸàÿµŸÅ ŸÖÿ∑ŸÑŸàÿ®",
      address: "ÿßŸÑÿπŸÜŸàÿßŸÜ ŸÖÿ∑ŸÑŸàÿ®",
      owner: "ÿßŸÑŸÖÿßŸÑŸÉ ŸÖÿ∑ŸÑŸàÿ®",
      email: "ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä ÿ∫Ÿäÿ± ÿµÿßŸÑÿ≠",
      mobile: "Ÿäÿ¨ÿ® ÿ£ŸÜ ŸäŸÉŸàŸÜ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿ®ŸäŸÜ 8 Ÿà 15 ÿ±ŸÇŸÖŸãÿß",
      discount_required: "ÿßŸÑÿÆÿµŸÖ ŸÖÿ∑ŸÑŸàÿ®",
      discount_format: "ÿßŸÑÿ≠ÿØ ÿßŸÑÿ£ŸÇÿµŸâ ÿ±ŸÇŸÖ ŸÖŸÜ ÿ±ŸÇŸÖŸäŸÜ",
      category: "ÿßÿÆÿ™ÿ± ÿßŸÑŸÅÿ¶ÿ©",
      subcategory: "ÿßÿÆÿ™ÿ± ÿßŸÑŸÅÿ¶ÿ© ÿßŸÑŸÅÿ±ÿπŸäÿ©",
     agree: "Ÿäÿ¨ÿ® ÿ£ŸÜ ÿ™ŸàÿßŸÅŸÇ ÿπŸÑŸâ ÿßŸÑÿ¥ÿ±Ÿàÿ∑",

    },
     terms: {
    title: "ÿßŸÑÿ¥ÿ±Ÿàÿ∑ ŸàÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ",
    intro: "ÿ™Ÿàÿ∂ÿ≠ Ÿáÿ∞Ÿá ÿßŸÑÿ¥ÿ±Ÿàÿ∑ ŸàÿßŸÑÿ£ÿ≠ŸÉÿßŸÖ ÿßŸÑŸÇŸàÿßÿπÿØ ŸàÿßŸÑŸÑŸàÿßÿ¶ÿ≠ ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ Ÿáÿ∞Ÿá ÿßŸÑÿÆÿØŸÖÿ©. ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿ•ÿ±ÿ≥ÿßŸÑ Ÿáÿ∞ÿß ÿßŸÑŸÜŸÖŸàÿ∞ÿ¨ÿå ŸÅÿ•ŸÜŸÉ ÿ™ŸàÿßŸÅŸÇ ÿπŸÑŸâ ÿßŸÑÿßŸÑÿ™ÿ≤ÿßŸÖ ÿ®Ÿáÿ∞Ÿá ÿßŸÑÿ¥ÿ±Ÿàÿ∑.",
    points: [
      "ÿ™ŸÇÿØŸäŸÖ ÿ™ŸÅÿßÿµŸäŸÑ ÿØŸÇŸäŸÇÿ© ÿπŸÜ ÿßŸÑÿ¥ÿ±ŸÉÿ©.",
      "ÿßŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿπŸÇŸàÿØ ÿßŸÑŸÖÿ±ŸÅŸàÿπÿ© ÿµÿßŸÑÿ≠ÿ©.",
      "ÿßÿ≠ÿ™ÿ±ÿßŸÖ ÿßŸÑÿÆÿµŸàÿµŸäÿ© ŸàŸÇŸàÿßÿπÿØ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™."
    ],
    outro: "ÿ•ÿ∞ÿß ŸÉŸÜÿ™ ŸÑÿß ÿ™ŸàÿßŸÅŸÇ ÿπŸÑŸâ Ÿáÿ∞Ÿá ÿßŸÑÿ¥ÿ±Ÿàÿ∑ÿå ŸÅŸÑÿß ŸäŸÖŸÉŸÜŸÉ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ© ŸÅŸä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ¥ÿ±ŸÉÿ©."
  }
  },
  hi: {
    labels: {
      welcome: "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à",
      company_id: "‡§ï‡§Ç‡§™‡§®‡•Ä ‡§Ü‡§à‡§°‡•Ä",
      company_name: "‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ",
      description: "‡§µ‡§ø‡§µ‡§∞‡§£",
      address: "‡§™‡§§‡§æ",
      owner: "‡§Æ‡§æ‡§≤‡§ø‡§ï",
      email: "‡§à‡§Æ‡•á‡§≤",
      mobile: "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤",
      landline: "‡§≤‡•à‡§Ç‡§°‡§≤‡§æ‡§á‡§®",
      category: "‡§∂‡•ç‡§∞‡•á‡§£‡•Ä",
      subcategory: "‡§â‡§™-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä",
      discount: "‡§õ‡•Ç‡§ü (%)",
      comments: "‡§ü‡§ø‡§™‡•ç‡§™‡§£‡§ø‡§Ø‡§æ‡§Å",
      contract: "‡§Ö‡§®‡•Å‡§¨‡§Ç‡§ß ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç",
      agree: "‡§Æ‡•à‡§Ç ‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§∂‡§∞‡•ç‡§§‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•Ç‡§Å",
    },
    errors: {
      company_id: "‡§ï‡§Ç‡§™‡§®‡•Ä ‡§Ü‡§à‡§°‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      company_name: "‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      description: "‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      address: "‡§™‡§§‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      owner: "‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      email: "‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§à‡§Æ‡•á‡§≤ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      mobile: "‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ 8‚Äì15 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è",
      discount_required: "‡§õ‡•Ç‡§ü ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à",
      discount_format: "‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 2-‡§Ö‡§Ç‡§ï‡•Ä‡§Ø ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ",
      category: "‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç",
      subcategory: "‡§â‡§™-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç",
      agree: "‡§Ü‡§™‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Æ‡•ã‡§Ç ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è",
    },
  },
  ja: {
    labels: {
      welcome: "„Çà„ÅÜ„Åì„Åù",
      company_id: "‰ºöÁ§æID",
      company_name: "‰ºöÁ§æÂêç",
      description: "Ë™¨Êòé",
      address: "‰ΩèÊâÄ",
      owner: "„Ç™„Éº„Éä„Éº",
      email: "„É°„Éº„É´",
      mobile: "Êê∫Â∏ØÈõªË©±",
      landline: "Âõ∫ÂÆöÈõªË©±",
      category: "„Ç´„ÉÜ„Ç¥„É™„Éº",
      subcategory: "„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„Éº",
      discount: "Ââ≤Âºï (%)",
      comments: "„Ç≥„É°„É≥„Éà",
      contract: "Â•ëÁ¥Ñ„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ",
      agree: "Âà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åó„Åæ„Åô",
    },
    errors: {
      company_id: "‰ºöÁ§æID„ÅØÂøÖÈ†à„Åß„Åô",
      company_name: "‰ºöÁ§æÂêç„ÅØÂøÖÈ†à„Åß„Åô",
      description: "Ë™¨Êòé„ÅØÂøÖÈ†à„Åß„Åô",
      address: "‰ΩèÊâÄ„ÅØÂøÖÈ†à„Åß„Åô",
      owner: "„Ç™„Éº„Éä„Éº„ÅØÂøÖÈ†à„Åß„Åô",
      email: "ÊúâÂäπ„Å™„É°„Éº„É´„ÅåÂøÖË¶Å„Åß„Åô",
      mobile: "Êê∫Â∏ØÁï™Âè∑„ÅØ8„Äú15Ê°Å„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô",
      discount_required: "Ââ≤Âºï„ÅØÂøÖÈ†à„Åß„Åô",
      discount_format: "ÊúÄÂ§ß2Ê°Å„ÅÆÊï∞Â≠ó",
      category: "„Ç´„ÉÜ„Ç¥„É™„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
      subcategory: "„Çµ„Éñ„Ç´„ÉÜ„Ç¥„É™„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
      agree: "Âà©Áî®Ë¶èÁ¥Ñ„Å´ÂêåÊÑè„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô",
    },
  },
  ch: {
    labels: {
      welcome: "Ê¨¢Ëøé",
      company_id: "ÂÖ¨Âè∏ÁºñÂè∑",
      company_name: "ÂÖ¨Âè∏ÂêçÁß∞",
      description: "ÊèèËø∞",
      address: "Âú∞ÂùÄ",
      owner: "ÊâÄÊúâËÄÖ",
      email: "ÁîµÂ≠êÈÇÆ‰ª∂",
      mobile: "ÊâãÊú∫",
      landline: "Â∫ßÊú∫",
      category: "Á±ªÂà´",
      subcategory: "Â≠êÁ±ªÂà´",
      discount: "ÊäòÊâ£ (%)",
      comments: "ËØÑËÆ∫",
      contract: "‰∏ä‰º†ÂêàÂêå",
      agree: "ÊàëÂêåÊÑèÊù°Ê¨æÂíåÊù°‰ª∂",
    },
    errors: {
      company_id: "ÂÖ¨Âè∏ÁºñÂè∑ÊòØÂøÖÂ°´È°π",
      company_name: "ÂÖ¨Âè∏ÂêçÁß∞ÊòØÂøÖÂ°´È°π",
      description: "ÊèèËø∞ÊòØÂøÖÂ°´È°π",
      address: "Âú∞ÂùÄÊòØÂøÖÂ°´È°π",
      owner: "ÊâÄÊúâËÄÖÊòØÂøÖÂ°´È°π",
      email: "ÈúÄË¶ÅÊúâÊïàÁöÑÁîµÂ≠êÈÇÆ‰ª∂",
      mobile: "ÊâãÊú∫ÂøÖÈ°ª‰∏∫8Âà∞15‰ΩçÊï∞Â≠ó",
      discount_required: "ÈúÄË¶ÅÊäòÊâ£",
      discount_format: "ÊúÄÂ§ö2‰ΩçÊï∞",
      category: "ËØ∑ÈÄâÊã©Á±ªÂà´",
      subcategory: "ËØ∑ÈÄâÊã©Â≠êÁ±ªÂà´",
      agree: "ÊÇ®ÂøÖÈ°ªÂêåÊÑèÊù°Ê¨æ",
    },
  },
  es: {
    labels: {
      welcome: "Bienvenido",
      company_id: "ID de la empresa",
      company_name: "Nombre de la empresa",
      description: "Descripci√≥n",
      address: "Direcci√≥n",
      owner: "Propietario",
      email: "Correo electr√≥nico",
      mobile: "M√≥vil",
      landline: "Tel√©fono fijo",
      category: "Categor√≠a",
      subcategory: "Subcategor√≠a",
      discount: "Descuento (%)",
      comments: "Comentarios",
      contract: "Subir contrato",
      agree: "Acepto los t√©rminos y condiciones",
    },
    errors: {
      company_id: "ID de la empresa es obligatorio",
      company_name: "Nombre de la empresa es obligatorio",
      description: "Descripci√≥n es obligatoria",
      address: "Direcci√≥n es obligatoria",
      owner: "Propietario es obligatorio",
      email: "Correo electr√≥nico v√°lido requerido",
      mobile: "El m√≥vil debe tener entre 8 y 15 d√≠gitos",
      discount_required: "El descuento es obligatorio",
      discount_format: "N√∫mero m√°ximo de 2 d√≠gitos",
      category: "Seleccione una categor√≠a",
      subcategory: "Seleccione una subcategor√≠a",
      agree: "Debe aceptar los t√©rminos",
    },
  },
  de: {
    labels: {
      welcome: "Willkommen",
      company_id: "Firmen-ID",
      company_name: "Firmenname",
      description: "Beschreibung",
      address: "Adresse",
      owner: "Inhaber",
      email: "E-Mail",
      mobile: "Mobiltelefon",
      landline: "Festnetz",
      category: "Kategorie",
      subcategory: "Unterkategorie",
      discount: "Rabatt (%)",
      comments: "Kommentare",
      contract: "Vertrag hochladen",
      agree: "Ich stimme den Gesch√§ftsbedingungen zu",
    },
    errors: {
      company_id: "Firmen-ID ist erforderlich",
      company_name: "Firmenname ist erforderlich",
      description: "Beschreibung ist erforderlich",
      address: "Adresse ist erforderlich",
      owner: "Inhaber ist erforderlich",
      email: "G√ºltige E-Mail erforderlich",
      mobile: "Mobil muss 8‚Äì15 Ziffern haben",
      discount_required: "Rabatt ist erforderlich",
      discount_format: "Maximal 2-stellige Zahl",
      category: "Kategorie ausw√§hlen",
      subcategory: "Unterkategorie ausw√§hlen",
      agree: "Sie m√ºssen den Bedingungen zustimmen",
    },
  },
  ru: {
    labels: {
      welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
      company_id: "ID –∫–æ–º–ø–∞–Ω–∏–∏",
      company_name: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
      description: "–û–ø–∏—Å–∞–Ω–∏–µ",
      address: "–ê–¥—Ä–µ—Å",
      owner: "–í–ª–∞–¥–µ–ª–µ—Ü",
      email: "–≠–ª. –ø–æ—á—Ç–∞",
      mobile: "–ú–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
      landline: "–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω",
      category: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
      subcategory: "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
      discount: "–°–∫–∏–¥–∫–∞ (%)",
      comments: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏",
      contract: "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç",
      agree: "–Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Å–ª–æ–≤–∏—è–º–∏",
    },
    errors: {
      company_id: "ID –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      company_name: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
      description: "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
      address: "–ê–¥—Ä–µ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      owner: "–í–ª–∞–¥–µ–ª–µ—Ü –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
      email: "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã",
      mobile: "–ú–æ–±–∏–ª—å–Ω—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 8‚Äì15 —Ü–∏—Ñ—Ä",
      discount_required: "–°–∫–∏–¥–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞",
      discount_format: "–ú–∞–∫—Å–∏–º—É–º 2-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ",
      category: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
      subcategory: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é",
      agree: "–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏",
    },
  },
  pt: {
    labels: {
      welcome: "Bem-vindo",
      company_id: "ID da empresa",
      company_name: "Nome da empresa",
      description: "Descri√ß√£o",
      address: "Endere√ßo",
      owner: "Propriet√°rio",
      email: "Email",
      mobile: "Celular",
      landline: "Telefone fixo",
      category: "Categoria",
      subcategory: "Subcategoria",
      discount: "Desconto (%)",
      comments: "Coment√°rios",
      contract: "Carregar contrato",
      agree: "Concordo com os Termos e Condi√ß√µes",
    },
    errors: {
      company_id: "ID da empresa √© obrigat√≥rio",
      company_name: "Nome da empresa √© obrigat√≥rio",
      description: "Descri√ß√£o √© obrigat√≥ria",
      address: "Endere√ßo √© obrigat√≥rio",
      owner: "Propriet√°rio √© obrigat√≥rio",
      email: "Email v√°lido obrigat√≥rio",
      mobile: "Celular deve ter 8‚Äì15 d√≠gitos",
      discount_required: "O desconto √© obrigat√≥rio",
      discount_format: "N√∫mero m√°ximo de 2 d√≠gitos",
      category: "Selecione uma categoria",
      subcategory: "Selecione uma subcategoria",
      agree: "Voc√™ deve concordar com os termos",
    },
  },
};

export default function CompanyProfileForm() {
  const [activeLang, setActiveLang] = useState("en");
  const [form, setForm] = useState({
    company_id: "",
    companyEn: "",
    descEn: "",
    addressEn: "",
    ownerEn: "",
    companyFr: "",
    descFr: "",
    addressFr: "",
    ownerFr: "",
    companyAr: "",
    descAr: "",
    addressAr: "",
    ownerAr: "",
    email: "",
    mobile: "",
    landline: "",
    category: "",
    subcategory: "",
    discount: "",
    comments: "",
    agree: false,
  });

  const [file, setFile] = useState(null);
  const [errors, setErrors] = useState({});
  const [showTerms, setShowTerms] = useState(false);

  const { id } = useParams(); // edit mode if id exists
  const navigate = useNavigate();

  // Fetch existing company data when editing
  useEffect(() => {
    if (id) {
      const fetchCompany = async () => {
        try {
          const base = import.meta.env.VITE_API_URL || "";
          console.log("üì° Fetching company:", `${base}/api/companies/${id}`); // log request URL
          const res = await fetch(`${base}/api/companies/${id}`);
          const response = await res.json();

          if (response.success) {
            const c = response.data;
            setForm((prev) => ({
              ...prev,
              company_id: c.company_id,
              email: c.email,
              mobile: c.mobile,
              landline: c.landline,
              category: c.category,
              subcategory: c.subcategory,
              discount: c.discount,
              comments: c.comments,

              companyEn: c.properties?.EN?.company_name || "",
              descEn: c.properties?.EN?.description || "",
              addressEn: c.properties?.EN?.address || "",
              ownerEn: c.properties?.EN?.owner_name || "",

              companyFr: c.properties?.FR?.company_name || "",
              descFr: c.properties?.FR?.description || "",
              addressFr: c.properties?.FR?.address || "",
              ownerFr: c.properties?.FR?.owner_name || "",

              companyAr: c.properties?.AR?.company_name || "",
              descAr: c.properties?.AR?.description || "",
              addressAr: c.properties?.AR?.address || "",
              ownerAr: c.properties?.AR?.owner_name || "",
            }));
          }
        } catch (err) {
          console.error("‚ùå Failed to load company:", err);
        }
      };

      fetchCompany();
    }
  }, [id]);

  const has = (s) => !!(s && s.trim());
  const emailRx = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  const validate = (f) => {
    const e = {};
    const t = messages[activeLang].errors;

    if (!has(f.company_id)) e.company_id = t.company_id;

    if (activeLang === "en") {
      if (!has(f.companyEn)) e.companyEn = t.company_name;
      if (!has(f.descEn)) e.descEn = t.description;
      if (!has(f.addressEn)) e.addressEn = t.address;
      if (!has(f.ownerEn)) e.ownerEn = t.owner;
    }
    if (activeLang === "fr") {
      if (!has(f.companyFr)) e.companyFr = t.company_name;
      if (!has(f.descFr)) e.descFr = t.description;
      if (!has(f.addressFr)) e.addressFr = t.address;
      if (!has(f.ownerFr)) e.ownerFr = t.owner;
    }
    if (activeLang === "ar") {
      if (!has(f.companyAr)) e.companyAr = t.company_name;
      if (!has(f.descAr)) e.descAr = t.description;
      if (!has(f.addressAr)) e.addressAr = t.address;
      if (!has(f.ownerAr)) e.ownerAr = t.owner;
    }

    if (!emailRx.test(f.email)) e.email = t.email;
    if (!/^\d{8,15}$/.test(String(f.mobile || ""))) e.mobile = t.mobile;
    if (!has(f.discount)) e.discount = t.discount_required;
    else if (!/^\d{1,2}$/.test(f.discount)) e.discount = t.discount_format;
    if (!f.category) e.category = t.category;
    if (!f.subcategory) e.subcategory = t.subcategory;
    if (!f.agree) e.agree = t.agree;

    return e;
  };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    const val = type === "checkbox" ? checked : value;
    setForm((prev) => ({ ...prev, [name]: val }));
    setErrors((prev) => {
      const updated = { ...prev };
      if (has(val)) delete updated[name];
      return updated;
    });
  };

  const handleFile = (e) => setFile(e.target.files?.[0] || null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const v = validate(form);
    setErrors(v);
    if (Object.keys(v).length > 0) return;

    const fd = new FormData();
    fd.append("company_id", form.company_id);
    fd.append("email", form.email);
    fd.append("mobile", form.mobile);
    fd.append("landline", form.landline);
    fd.append("category", form.category);
    fd.append("subcategory", form.subcategory);
    fd.append("discount", form.discount);
    fd.append("comments", form.comments);
    if (file) fd.append("contract", file);

    let activeProperties = {};
    if (activeLang === "en") {
      activeProperties = {
        EN: {
          company_name: form.companyEn,
          description: form.descEn,
          address: form.addressEn,
          owner_name: form.ownerEn,
        },
      };
    } else if (activeLang === "fr") {
      activeProperties = {
        FR: {
          company_name: form.companyFr,
          description: form.descFr,
          address: form.addressFr,
          owner_name: form.ownerFr,
        },
      };
    } else if (activeLang === "ar") {
      activeProperties = {
        AR: {
          company_name: form.companyAr,
          description: form.descAr,
          address: form.addressAr,
          owner_name: form.ownerAr,
        },
      };
    }
    fd.append("properties", JSON.stringify(activeProperties));

    try {
      const base = import.meta.env.VITE_API_URL || "";
      const url = id
        ? `${base}/api/companies/${id}` // update
        : `${base}/api/companies`; // create
      const method = id ? "PUT" : "POST";

      const res = await fetch(url, {
        method,
        body: fd,
      });

      const response = await res.json();
      if (!res.ok) {
        alert(`‚ùå Failed to save company: ${response.error || "Unknown error"}`);
        return;
      }

      alert(id ? "‚úÖ Company updated successfully!" : "‚úÖ Company created successfully!");
      navigate("/company-profile");
    } catch (err) {
      console.error("‚ùå Error:", err);
      alert("‚ùå Failed to save company: " + err.message);
    }
  };

  const langKey = activeLang.charAt(0).toUpperCase() + activeLang.slice(1);

  return (
    <div className="register-container">
     <header className="banner" dir={activeLang === "ar" ? "rtl" : "ltr"}>
  <h1>
    {id
      ? messages[activeLang].labels.heading_edit
      : messages[activeLang].labels.heading_create}
  </h1>
</header>

<main className="form-card" dir={activeLang === "ar" ? "rtl" : "ltr"}>
  <h2>{messages[activeLang].labels.company_info}</h2>

        <form onSubmit={handleSubmit} autoComplete="off">
          {/* Company ID */}
          <div className="row">
            <div className="col">
              <label>
                {messages[activeLang].labels.company_id}
                <span className="required">*</span>
              </label>
              <input
                type="text"
                name="company_id"
                placeholder="Enter Company ID"
                value={form.company_id}
                onChange={handleChange}
                disabled={!!id} // lock when editing
              />
              {errors.company_id && <p className="error">{errors.company_id}</p>}
            </div>
          </div>

          {/* Language tabs */}
          <div className="lang-tabs">
            <button
              className={`lang-btn ${activeLang === "en" ? "active" : ""}`}
              onClick={(e) => {
                e.preventDefault();
                setActiveLang("en");
              }}
            >
              English
            </button>
            <button
              className={`lang-btn ${activeLang === "fr" ? "active" : ""}`}
              onClick={(e) => {
                e.preventDefault();
                setActiveLang("fr");
              }}
            >
              Fran√ßais
            </button>
            <button
              className={`lang-btn ${activeLang === "ar" ? "active" : ""}`}
              onClick={(e) => {
                e.preventDefault();
                setActiveLang("ar");
              }}
            >
               ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
            </button>
          </div>

          {/* Language card */}
          <div className="lang-card" dir={activeLang === "ar" ? "rtl" : "ltr"}>
            <h3 className="welcome-heading">{messages[activeLang].labels.welcome}</h3>

            <div className="field">
              <label>
                {messages[activeLang].labels.company_name}
                <span className="required">*</span>
              </label>
              <input
                name={`company${langKey}`}
                value={form[`company${langKey}`]}
                onChange={handleChange}
              />
              {errors[`company${langKey}`] && (
                <p className="error">{errors[`company${langKey}`]}</p>
              )}
            </div>

            <div className="field">
              <label>
                {messages[activeLang].labels.description}
                <span className="required">*</span>
              </label>
              <textarea
                name={`desc${langKey}`}
                rows="3"
                value={form[`desc${langKey}`]}
                onChange={handleChange}
              />
              {errors[`desc${langKey}`] && (
                <p className="error">{errors[`desc${langKey}`]}</p>
              )}
            </div>

            <div className="field">
              <label>
                {messages[activeLang].labels.address}
                <span className="required">*</span>
              </label>
              <textarea
                name={`address${langKey}`}
                rows="3"
                value={form[`address${langKey}`]}
                onChange={handleChange}
              />
              {errors[`address${langKey}`] && (
                <p className="error">{errors[`address${langKey}`]}</p>
              )}
            </div>

            <div className="field">
              <label>
                {messages[activeLang].labels.owner}
                <span className="required">*</span>
              </label>
              <input
                name={`owner${langKey}`}
                value={form[`owner${langKey}`]}
                onChange={handleChange}
              />
              {errors[`owner${langKey}`] && (
                <p className="error">{errors[`owner${langKey}`]}</p>
              )}
            </div>
          </div>

          {/* Global fields */}
          <div className="row">
            <div className="col">
              <label>
                {messages[activeLang].labels.email}
                <span className="required">*</span>
              </label>
              <input type="email" name="email" value={form.email} onChange={handleChange} />
              {errors.email && <p className="error">{errors.email}</p>}
            </div>
            <div className="col">
              <label>
                {messages[activeLang].labels.mobile}
                <span className="required">*</span>
              </label>
              <input type="tel" name="mobile" value={form.mobile} onChange={handleChange} />
              {errors.mobile && <p className="error">{errors.mobile}</p>}
            </div>
          </div>

          <div className="row">
            <div className="col">
              <label>{messages[activeLang].labels.landline}</label>
              <input type="tel" name="landline" value={form.landline} onChange={handleChange} />
            </div>
          </div>

          <div className="row">
            <div className="col">
              <label>
                {messages[activeLang].labels.category}
                <span className="required">*</span>
              </label>
              <select name="category" value={form.category} onChange={handleChange}>
                <option value="">--Select--</option>
                <option value="hotel">Hotel</option>
                <option value="retail">Retail</option>
              </select>
              {errors.category && <p className="error">{errors.category}</p>}
            </div>
            <div className="col">
              <label>
                {messages[activeLang].labels.subcategory}
                <span className="required">*</span>
              </label>
              <select name="subcategory" value={form.subcategory} onChange={handleChange}>
                <option value="">--Select--</option>
                <option value="health">Health</option>
                <option value="grocery">Grocery</option>
                <option value="fashion">Fashion</option>
              </select>
              {errors.subcategory && <p className="error">{errors.subcategory}</p>}
            </div>
          </div>

          <div className="row">
            <div className="col">
              <label>
                {messages[activeLang].labels.discount}
                <span className="required">*</span>
              </label>
              <input name="discount" value={form.discount} onChange={handleChange} />
              {errors.discount && <p className="error">{errors.discount}</p>}
            </div>
          </div>

          <div className="row">
            <div className="col">
              <label>{messages[activeLang].labels.comments}</label>
              <textarea name="comments" rows="3" value={form.comments} onChange={handleChange} />
            </div>
          </div>

{/* File Upload */}

<div className="row">
  <div className="col file-upload">
    <label htmlFor="contract" className="custom-file-label">
      üì§ {messages[activeLang].labels.contract}
    </label>
    <input
      id="contract"
      type="file"
      name="contract"
      accept=".pdf,.png,.jpg,.jpeg"
      onChange={(e) => setFile(e.target.files[0])}
      style={{ display: "none" }}
    />
    <span className="file-name">
      {file ? file.name : messages[activeLang].labels.no_file}
    </span>
  </div>
</div>



{/* Terms & Conditions */}
<div className="row">
  <div className="col terms">
    <label className="terms-label">
      <div
        className={`toggle-switch ${form.agree ? "on" : ""}`}
        onClick={() => setForm((prev) => ({ ...prev, agree: !prev.agree }))}
      >
        <div className="toggle-slider"></div>
      </div>
      <span>
        {messages[activeLang].labels.agree_prefix}{" "}
        <a
          href="#"
          onClick={(e) => {
            e.preventDefault();
            setShowTerms(true);
          }}
        >
          {messages[activeLang].labels.terms}
        </a>
      </span>
    </label>
    {errors.agree && <p className="error">{errors.agree}</p>}
  </div>
</div>


<TermsModal 
  open={showTerms} 
  onClose={() => setShowTerms(false)} 
  activeLang={activeLang} 
/>



          {/* Buttons */}
   <div className="button-group">
  <button
    type="button"
    className="btn cancel"
    onClick={() => navigate("/company-profile")}
  >
    {messages[activeLang].labels.cancel}
  </button>
  <button type="submit" className="btn submit">
    {id
      ? messages[activeLang].labels.update
      : messages[activeLang].labels.approve}
  </button>
</div>


        </form>
      </main>

      <footer className="footer">¬© 2025 Comviva. All rights reserved.</footer>
    </div>
  );
}
